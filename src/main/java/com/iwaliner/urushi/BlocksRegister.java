package com.iwaliner.urushi;


import com.iwaliner.urushi.Block.*;
import com.iwaliner.urushi.World.*;
import net.minecraft.block.*;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialColor;
import net.minecraft.entity.EntityType;
import net.minecraft.item.BlockItem;
import net.minecraft.item.DyeColor;
import net.minecraft.item.Item;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockReader;
import net.minecraftforge.common.ToolType;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;

public class BlocksRegister {
    private static final DeferredRegister<Block> BLOCKS= DeferredRegister.create(ForgeRegistries.BLOCKS, ModCore_Urushi.MOD_ID);
    public static final RegistryObject<Block> Sikkui = BLOCKS.register("plaster", () -> {return new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SikkuiSlab = BLOCKS.register("plaster_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SikkuiStairs = BLOCKS.register("plaster_stairs", () -> {return new StairsBlock(((Block)Sikkui.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> sikkui_bars= BLOCKS.register("plaster_bars", () -> {return new BarsBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 3.0F).requiresCorrectToolForDrops());});
    public static final RegistryObject<Block> OakFramedSikkui = BLOCKS.register("oak_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> SpruceFramedSikkui = BLOCKS.register("spruce_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> BirchFramedSikkui = BLOCKS.register("birch_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> JungleFramedSikkui = BLOCKS.register("jungle_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> AcaciaFramedSikkui = BLOCKS.register("acacia_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> DarkOakFramedSikkui = BLOCKS.register("dark_oak_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> JapaneseApricotFramedSikkui = BLOCKS.register("japanese_apricot_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> SakuraFramedSikkui = BLOCKS.register("sakura_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> CypressFramedSikkui = BLOCKS.register("cypress_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> RedUrushiFramedSikkui = BLOCKS.register("red_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> BlackUrushiFramedSikkui = BLOCKS.register("black_framed_plaster", () -> {return new FramedBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.SNOW).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> Namako = BLOCKS.register("namako", () -> {return new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> WattleAndDaub = BLOCKS.register("wattle_and_daub", () -> {return new Block(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.DIRT).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 2.0F));});
    public static final RegistryObject<Block> WattleAndDaubSlab = BLOCKS.register("wattle_and_daub_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.DIRT).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 2.0F).dynamicShape());});
    public static final RegistryObject<Block> WattleAndDaubStairs = BLOCKS.register("wattle_and_daub_stairs", () -> {return new StairsBlock(((Block)WattleAndDaubSlab.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.GRASS, MaterialColor.DIRT).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 2.0F));});
 public static final RegistryObject<Block> SandCoast = BLOCKS.register("sand_coast", () -> {return new Block(AbstractBlock.Properties.of(Material.SAND, MaterialColor.SAND).harvestTool(ToolType.SHOVEL).sound(SoundType.SAND).harvestLevel(0).strength(0.5F, 3.0F));});
 public static final RegistryObject<Block> ThatchedBlock = BLOCKS.register("thatched_block", () -> {return new Block(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_YELLOW).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F));});
 public static final RegistryObject<Block> ThatchedSlab = BLOCKS.register("thatched_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_YELLOW).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F).dynamicShape());});
 public static final RegistryObject<Block> ThatchedStairs = BLOCKS.register("thatched_stairs", () -> {return new StairsBlock(((Block)ThatchedBlock.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_YELLOW).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F));});
 public static final RegistryObject<Block> ThatchedRoof45 = BLOCKS.register("thatched_roof_45", () -> {return new Roof45Block(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_YELLOW).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F).noOcclusion().dynamicShape());});

 public static final RegistryObject<Block> ThatchedRoof225 = BLOCKS.register("thatched_roof_225", () -> {return new Roof225Block(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_YELLOW).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F).noOcclusion().dynamicShape());});
 public static final RegistryObject<Block> HiwadabukiBlock = BLOCKS.register("hiwadabuki_block", () -> {return new Block(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_BLACK).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F));});
 public static final RegistryObject<Block> HiwadabukiSlab = BLOCKS.register("hiwadabuki_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_BLACK).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F).dynamicShape());});
 public static final RegistryObject<Block> HiwadabukiStairs = BLOCKS.register("hiwadabuki_stairs", () -> {return new StairsBlock(((Block)HiwadabukiBlock.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_BLACK).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F));});
 public static final RegistryObject<Block> HiwadabukiRoof45 = BLOCKS.register("hiwadabuki_roof_45", () -> {return new Roof45Block(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_BLACK).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F).noOcclusion().dynamicShape());});
 public static final RegistryObject<Block> HiwadabukiRoof225 = BLOCKS.register("hiwadabuki_roof_225", () -> {return new Roof225Block(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.TERRACOTTA_BLACK).harvestTool(ToolType.SHOVEL).sound(SoundType.GRASS).harvestLevel(0).strength(0.5F, 3.0F).noOcclusion().dynamicShape());});
    public static final RegistryObject<Block> RoughStone= BLOCKS.register("rough_stone", () -> {return new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});

    public static final RegistryObject<Block> RoughStoneSlab = BLOCKS.register("rough_stone_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> RoughStoneStairs = BLOCKS.register("rough_stone_stairs", () -> {return new StairsBlock(((Block)RoughStone.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> RoughStoneWall = BLOCKS.register("rough_stone_wall", () -> {return new WallBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> Concrete = BLOCKS.register("concrete", () -> {return new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> ConcreteSlab = BLOCKS.register("concrete_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> ConcreteStairs = BLOCKS.register("concrete_stairs", () -> {return new StairsBlock(((Block)Concrete.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).requiresCorrectToolForDrops().harvestLevel(0).strength(1F, 10.0F));});
    public static final RegistryObject<Block> DirtyConcrete = BLOCKS.register("dirty_concrete", () -> {return new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> DirtyConcreteSlab = BLOCKS.register("dirty_concrete_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> DirtyConcreteStairs = BLOCKS.register("dirty_concrete_stairs", () -> {return new StairsBlock(((Block)DirtyConcrete.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).requiresCorrectToolForDrops().harvestLevel(0).strength(1F, 10.0F));});
    public static final RegistryObject<Block> LidlessGroove = BLOCKS.register("lidless_groove", () -> {return new GrooveBlock(false,AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> Groove = BLOCKS.register("groove", () -> {return new GrooveBlock(true,AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> MeshGroove = BLOCKS.register("mesh_groove", () -> {return new GrooveBlock(true,AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});

    public static final RegistryObject<Block> ConnectableGlass = BLOCKS.register("connectable_glass", () -> {return new ConnectableGlassBlock(AbstractBlock.Properties.of(Material.GLASS).sound(SoundType.GLASS).harvestLevel(0).strength(0.3F, 3.0F).noOcclusion().isValidSpawn(BlocksRegister::never).isRedstoneConductor(BlocksRegister::never).isSuffocating(BlocksRegister::never).isViewBlocking(BlocksRegister::never));});
    public static final RegistryObject<Block> ConnectableGlassPane = BLOCKS.register("connectable_glass_pane", () -> {return new ConnectableGlassPaneBlock(AbstractBlock.Properties.of(Material.GLASS).sound(SoundType.GLASS).harvestLevel(0).strength(0.3F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> MetalFramedGlass = BLOCKS.register("metal_framed_glass", () -> {return new ConnectableGlassBlock(AbstractBlock.Properties.of(Material.GLASS).sound(SoundType.GLASS).harvestLevel(0).strength(0.3F, 3.0F).noOcclusion().isValidSpawn(BlocksRegister::never).isRedstoneConductor(BlocksRegister::never).isSuffocating(BlocksRegister::never).isViewBlocking(BlocksRegister::never));});
    public static final RegistryObject<Block> MetalFramedGlassPane = BLOCKS.register("metal_framed_glass_pane", () -> {return new ConnectableGlassPaneBlock(AbstractBlock.Properties.of(Material.GLASS).sound(SoundType.GLASS).harvestLevel(0).strength(0.3F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> SmoothOakPlanks = BLOCKS.register("smooth_oak_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothOakSlab = BLOCKS.register("smooth_oak_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothOakStairs = BLOCKS.register("smooth_oak_stairs", () -> {return new StairsBlock(((Block)SmoothOakPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> OakParapet = BLOCKS.register("oak_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> oak_bars = BLOCKS.register("oak_bars", () -> {return new BarsBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 3.0F));});
    public static final RegistryObject<Block> SmoothSprucePlanks = BLOCKS.register("smooth_spruce_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.PODZOL).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothSpruceSlab = BLOCKS.register("smooth_spruce_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.PODZOL).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothSpruceStairs = BLOCKS.register("smooth_spruce_stairs", () -> {return new StairsBlock(((Block)SmoothSprucePlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.PODZOL).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SpruceParapet = BLOCKS.register("spruce_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.PODZOL).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> spruce_bars = BLOCKS.register("spruce_bars", () -> {return new BarsBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.PODZOL).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 3.0F));});
    public static final RegistryObject<Block> SmoothBirchPlanks = BLOCKS.register("smooth_birch_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothBirchSlab = BLOCKS.register("smooth_birch_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothBirchStairs = BLOCKS.register("smooth_birch_stairs", () -> {return new StairsBlock(((Block)SmoothBirchPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> BirchParapet = BLOCKS.register("birch_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> birch_bars = BLOCKS.register("birch_bars", () -> {return new BarsBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 3.0F));});
    public static final RegistryObject<Block> SmoothJunglePlanks = BLOCKS.register("smooth_jungle_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.DIRT).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothJungleSlab = BLOCKS.register("smooth_jungle_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.DIRT).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothJungleStairs = BLOCKS.register("smooth_jungle_stairs", () -> {return new StairsBlock(((Block)SmoothJunglePlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.DIRT).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> JungleParapet = BLOCKS.register("jungle_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.DIRT).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> jungle_bars = BLOCKS.register("jungle_bars", () -> {return new BarsBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.DIRT).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 3.0F));});
    public static final RegistryObject<Block> SmoothAcaciaPlanks = BLOCKS.register("smooth_acacia_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothAcaciaSlab = BLOCKS.register("smooth_acacia_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothAcaciaStairs = BLOCKS.register("smooth_acacia_stairs", () -> {return new StairsBlock(((Block)SmoothAcaciaPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> AcaciaParapet = BLOCKS.register("acacia_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> acacia_bars = BLOCKS.register("acacia_bars", () -> {return new BarsBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 3.0F));});
    public static final RegistryObject<Block> SmoothDarkOakPlanks = BLOCKS.register("smooth_dark_oak_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothDarkOakSlab = BLOCKS.register("smooth_dark_oak_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothDarkOakStairs = BLOCKS.register("smooth_dark_oak_stairs", () -> {return new StairsBlock(((Block)SmoothDarkOakPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> DarkOakParapet = BLOCKS.register("dark_oak_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> dark_oak_bars = BLOCKS.register("dark_oak_bars", () -> {return new BarsBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 3.0F));});
    public static final RegistryObject<Block> green_bars= BLOCKS.register("green_bars", () -> {return new BarsBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 3.0F));});
    public static final RegistryObject<Block> GreenTatami = BLOCKS.register("green_tatami", () -> {return new RotatedPillarBlock(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.GRASS).sound(SoundType.GRASS).harvestLevel(0).strength(0.2F, 10.0F));});
    public static final RegistryObject<Block> GreenTatamiCarpet = BLOCKS.register("green_tatami_carpet", () -> {return new TatamiCarpetBlock(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.GRASS).sound(SoundType.GRASS).harvestLevel(0).strength(0.2F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> BrownTatami = BLOCKS.register("brown_tatami", () -> {return new RotatedPillarBlock(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.GRASS).sound(SoundType.GRASS).harvestLevel(0).strength(0.2F, 10.0F));});
    public static final RegistryObject<Block> BrownTatamiCarpet = BLOCKS.register("brown_tatami_carpet", () -> {return new TatamiCarpetBlock(AbstractBlock.Properties.of(Material.GRASS, MaterialColor.GRASS).sound(SoundType.GRASS).harvestLevel(0).strength(0.2F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> GoldfishBowl = BLOCKS.register("goldfish_bowl", () -> {return new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.WATER).sound(SoundType.GLASS).harvestLevel(0).strength(0.2F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> IbushiKawaraBlock = BLOCKS.register("ibushi_kawara_block", () -> {return new HorizonalRotateBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F).requiresCorrectToolForDrops());});
    public static final RegistryObject<Block> IbushiKawaraSlab = BLOCKS.register("ibushi_kawara_slab", () -> {return new HorizonalRotateSlabBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> IbushiKawaraStairs = BLOCKS.register("ibushi_kawara_stairs", () -> {return new StairsBlock(((Block)IbushiKawaraBlock.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> ibushi_kawara_wall= BLOCKS.register("ibushi_kawara_wall", () -> {return new WallBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> IbushiKawaraRoof45 = BLOCKS.register("ibushi_kawara_roof_45", () -> {return new Roof45Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).noOcclusion().dynamicShape());});

 public static final RegistryObject<Block> IbushiKawaraRoof225 = BLOCKS.register("ibushi_kawara_roof_225", () -> {return new Roof225Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
 public static final RegistryObject<Block> CopperKawaraBlock = BLOCKS.register("copper_kawara_block", () -> {return new HorizonalRotateBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.DIRT).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F).requiresCorrectToolForDrops());});
    public static final RegistryObject<Block> CopperKawaraSlab = BLOCKS.register("copper_kawara_slab", () -> {return new HorizonalRotateSlabBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.DIRT).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> CopperKawaraStairs = BLOCKS.register("copper_kawara_stairs", () -> {return new StairsBlock(((Block)CopperKawaraBlock.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.STONE, MaterialColor.DIRT).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> copper_kawara_wall= BLOCKS.register("copper_kawara_wall", () -> {return new WallBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.DIRT).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> CopperKawaraRoof45 = BLOCKS.register("copper_kawara_roof_45", () -> {return new Roof45Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.DIRT).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).noOcclusion().dynamicShape());});

 public static final RegistryObject<Block> CopperKawaraRoof225 = BLOCKS.register("copper_kawara_roof_225", () -> {return new Roof225Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.DIRT).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
 public static final RegistryObject<Block> CupricOxideKawaraBlock = BLOCKS.register("cupric_oxide_kawara_block", () -> {return new HorizonalRotateBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.EMERALD).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).strength(1.0F, 10.0F).requiresCorrectToolForDrops());});
    public static final RegistryObject<Block> CupricOxideKawaraSlab = BLOCKS.register("cupric_oxide_kawara_slab", () -> {return new HorizonalRotateSlabBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.EMERALD).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> CupricOxideKawaraStairs = BLOCKS.register("cupric_oxide_kawara_stairs", () -> {return new StairsBlock(((Block)CupricOxideKawaraBlock.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.STONE, MaterialColor.EMERALD).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> cupric_oxide_kawara_wall= BLOCKS.register("cupric_oxide_kawara_wall", () -> {return new WallBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.DIRT).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> CupricOxideKawaraRoof45 = BLOCKS.register("cupric_oxide_kawara_roof_45", () -> {return new Roof45Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.EMERALD).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).noOcclusion().dynamicShape());});

 public static final RegistryObject<Block> CupricOxideKawaraRoof225 = BLOCKS.register("cupric_oxide_kawara_roof_225", () -> {return new Roof225Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.EMERALD).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
    public static final RegistryObject<Block> JapaneseApricotSapling = BLOCKS.register("japanese_apricot_sapling", () -> {return new SaplingBlock(new JapaneseApricotTree(),AbstractBlock.Properties.of(Material.PLANT, MaterialColor.COLOR_PINK).sound(SoundType.GRASS).noCollission().instabreak().randomTicks());});
    public static final RegistryObject<Block> JapaneseApricotLeaves = BLOCKS.register("japanese_apricot_leaves", () -> {return new LeavesBlock(AbstractBlock.Properties.of(Material.LEAVES, MaterialColor.COLOR_PINK).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().randomTicks());});
    public static final RegistryObject<Block> JapaneseApricotGlowingSapling = BLOCKS.register("glowing_japanese_apricot_sapling", () -> {return new GlowingSaplingBlock(new GlowingJapaneseApricotTree(),AbstractBlock.Properties.of(Material.PLANT, MaterialColor.COLOR_PINK).sound(SoundType.GRASS).noCollission().instabreak().randomTicks().lightLevel((p_235470_0_) -> {return 15;}));});
    public static final RegistryObject<Block> JapaneseApricotGlowingLeaves = BLOCKS.register("glowing_japanese_apricot_leaves", () -> {return new LeavesBlock(AbstractBlock.Properties.of(Material.LEAVES, MaterialColor.COLOR_PINK).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().randomTicks().lightLevel((p_235470_0_) -> {return 15;}));});
    public static final RegistryObject<Block> JapaneseApricotStrippedLog = BLOCKS.register("stripped_japanese_apricot_log", () -> {return new RotatedPillarBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> JapaneseApricotLog = BLOCKS.register("japanese_apricot_log", () -> {return new StrippableLogBlock(JapaneseApricotStrippedLog.get(),0,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> JapaneseApricotStrippedWood = BLOCKS.register("stripped_japanese_apricot_wood", () -> {return new RotatedPillarBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> JapaneseApricotWood = BLOCKS.register("japanese_apricot_wood", () -> {return new StrippableLogBlock(JapaneseApricotStrippedWood.get(),0,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> JapaneseApricotPlanks = BLOCKS.register("japanese_apricot_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> JapaneseApricotSlab = BLOCKS.register("japanese_apricot_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> JapaneseApricotStairs = BLOCKS.register("japanese_apricot_stairs", () -> {return new StairsBlock(((Block)JapaneseApricotPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> JapaneseApricotFence = BLOCKS.register("japanese_apricot_fence", () -> {return new FenceBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> JapaneseApricotFenceGate = BLOCKS.register("japanese_apricot_fence_gate", () -> {return new FenceGateBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> JapaneseApricotDoor = BLOCKS.register("japanese_apricot_door", () -> {return new DoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> JapaneseApricotTrapdoor = BLOCKS.register("japanese_apricot_trapdoor", () -> {return new TrapDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion().isValidSpawn(BlocksRegister::never));});
    public static final RegistryObject<Block> JapaneseApricotPressurePlate = BLOCKS.register("japanese_apricot_pressure_plate", () -> {return new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
    public static final RegistryObject<Block> JapaneseApricotButton = BLOCKS.register("japanese_apricot_button", () -> {return new WoodButtonBlock(AbstractBlock.Properties.of(Material.DECORATION, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
    public static final RegistryObject<Block> SmoothJapaneseApricotPlanks = BLOCKS.register("smooth_japanese_apricot_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothJapaneseApricotSlab = BLOCKS.register("smooth_japanese_apricot_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothJapaneseApricotStairs = BLOCKS.register("smooth_japanese_apricot_stairs", () -> {return new StairsBlock(((Block)SmoothJapaneseApricotPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> JapaneseApricotParapet = BLOCKS.register("japanese_apricot_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_PINK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> SakuraSapling = BLOCKS.register("sakura_sapling", () -> {return new SaplingBlock(new SakuraTree(),AbstractBlock.Properties.of(Material.PLANT, MaterialColor.TERRACOTTA_WHITE).sound(SoundType.GRASS).noCollission().instabreak().randomTicks());});
    public static final RegistryObject<Block> SakuraBigSapling = BLOCKS.register("big_sakura_sapling", () -> {return new SaplingBlock(new BigSakuraTree(),AbstractBlock.Properties.of(Material.PLANT, MaterialColor.TERRACOTTA_WHITE).sound(SoundType.GRASS).noCollission().instabreak().randomTicks());});
    public static final RegistryObject<Block> SakuraLeaves = BLOCKS.register("sakura_leaves", () -> {return new LeavesBlock(AbstractBlock.Properties.of(Material.LEAVES, MaterialColor.TERRACOTTA_WHITE).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().randomTicks());});
    public static final RegistryObject<Block> SakuraGlowingSapling = BLOCKS.register("glowing_sakura_sapling", () -> {return new GlowingSaplingBlock(new GlowingSakuraTree(),AbstractBlock.Properties.of(Material.PLANT, MaterialColor.TERRACOTTA_WHITE).sound(SoundType.GRASS).noCollission().instabreak().randomTicks().lightLevel((p_235470_0_) -> {return 15;}));});
    public static final RegistryObject<Block> SakuraGlowingBigSapling = BLOCKS.register("glowing_big_sakura_sapling", () -> {return new GlowingSaplingBlock(new GlowingBigSakuraTree(),AbstractBlock.Properties.of(Material.PLANT, MaterialColor.TERRACOTTA_WHITE).sound(SoundType.GRASS).noCollission().instabreak().randomTicks().lightLevel((p_235470_0_) -> {return 15;}));});
    public static final RegistryObject<Block> SakuraGlowingLeaves = BLOCKS.register("glowing_sakura_leaves", () -> {return new LeavesBlock(AbstractBlock.Properties.of(Material.LEAVES, MaterialColor.TERRACOTTA_WHITE).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().randomTicks().lightLevel((p_235470_0_) -> {return 15;}));});
    public static final RegistryObject<Block> SakuraStrippedLog = BLOCKS.register("stripped_sakura_log", () -> {return new RotatedPillarBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> SakuraLog = BLOCKS.register("sakura_log", () -> {return new StrippableLogBlock(SakuraStrippedLog.get(),1,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> SakuraStrippedWood = BLOCKS.register("stripped_sakura_wood", () -> {return new RotatedPillarBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> SakuraWood = BLOCKS.register("sakura_wood", () -> {return new StrippableLogBlock(SakuraStrippedWood.get(),1,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> SakuraPlanks = BLOCKS.register("sakura_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> SakuraSlab = BLOCKS.register("sakura_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SakuraStairs = BLOCKS.register("sakura_stairs", () -> {return new StairsBlock(((Block)SakuraPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SakuraFence = BLOCKS.register("sakura_fence", () -> {return new FenceBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> SakuraFenceGate = BLOCKS.register("sakura_fence_gate", () -> {return new FenceGateBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> SakuraDoor = BLOCKS.register("sakura_door", () -> {return new DoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> SakuraTrapdoor = BLOCKS.register("sakura_trapdoor", () -> {return new TrapDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion().isValidSpawn(BlocksRegister::never));});
    public static final RegistryObject<Block> SakuraPressurePlate = BLOCKS.register("sakura_pressure_plate", () -> {return new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
    public static final RegistryObject<Block> SakuraButton = BLOCKS.register("sakura_button", () -> {return new WoodButtonBlock(AbstractBlock.Properties.of(Material.DECORATION, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
    public static final RegistryObject<Block> SmoothSakuraPlanks = BLOCKS.register("smooth_sakura_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothSakuraSlab = BLOCKS.register("smooth_sakura_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothSakuraStairs = BLOCKS.register("smooth_sakura_stairs", () -> {return new StairsBlock(((Block)SmoothSakuraPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SakuraParapet = BLOCKS.register("sakura_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> CypressSapling = BLOCKS.register("cypress_sapling", () -> {return new SaplingBlock(new CypressTree(),AbstractBlock.Properties.of(Material.PLANT, MaterialColor.GRASS).sound(SoundType.GRASS).noCollission().instabreak().randomTicks());});
    public static final RegistryObject<Block> CypressLeaves = BLOCKS.register("cypress_leaves", () -> {return new LeavesBlock(AbstractBlock.Properties.of(Material.LEAVES, MaterialColor.GRASS).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().randomTicks());});
    public static final RegistryObject<Block> CypressStrippedLog = BLOCKS.register("stripped_cypress_log", () -> {return new RotatedPillarBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> CypressLog = BLOCKS.register("cypress_log", () -> {return new StrippableLogBlock(CypressStrippedLog.get(),2,AbstractBlock.Properties.of(Material.SAND, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> CypressStrippedWood = BLOCKS.register("stripped_cypress_wood", () -> {return new RotatedPillarBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> CypressWood = BLOCKS.register("cypress_wood", () -> {return new StrippableLogBlock(CypressStrippedWood.get(),2,AbstractBlock.Properties.of(Material.SAND, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F));});
    public static final RegistryObject<Block> CypressPlanks = BLOCKS.register("cypress_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> CypressSlab = BLOCKS.register("cypress_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> CypressStairs = BLOCKS.register("cypress_stairs", () -> {return new StairsBlock(((Block)CypressPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> CypressFence = BLOCKS.register("cypress_fence", () -> {return new FenceBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> CypressFenceGate = BLOCKS.register("cypress_fence_gate", () -> {return new FenceGateBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> CypressDoor = BLOCKS.register("cypress_door", () -> {return new DoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> CypressTrapdoor = BLOCKS.register("cypress_trapdoor", () -> {return new TrapDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion().isValidSpawn(BlocksRegister::never));});
    public static final RegistryObject<Block> CypressPressurePlate = BLOCKS.register("cypress_pressure_plate", () -> {return new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
    public static final RegistryObject<Block> CypressButton = BLOCKS.register("cypress_button", () -> {return new WoodButtonBlock(AbstractBlock.Properties.of(Material.DECORATION, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
    public static final RegistryObject<Block> SmoothCypressPlanks = BLOCKS.register("smooth_cypress_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> SmoothCypressSlab = BLOCKS.register("smooth_cypress_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> SmoothCypressStairs = BLOCKS.register("smooth_cypress_stairs", () -> {return new StairsBlock(((Block)SmoothCypressPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> CypressParapet = BLOCKS.register("cypress_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
    public static final RegistryObject<Block> LacquerSapling = BLOCKS.register("lacquer_sapling", () -> {return new SaplingBlock(new LacquerTree(),AbstractBlock.Properties.of(Material.PLANT, MaterialColor.GRASS).sound(SoundType.GRASS).noCollission().instabreak().randomTicks());});
    public static final RegistryObject<Block> LacquerLeaves = BLOCKS.register("lacquer_leaves", () -> {return new LeavesBlock(AbstractBlock.Properties.of(Material.LEAVES, MaterialColor.GRASS).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().randomTicks());});
    public static final RegistryObject<Block> LacquerLog = BLOCKS.register("lacquer_log", () -> {return new LacquerLogBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> ChiseledLacquerLog = BLOCKS.register("chiseled_lacquer_log", () -> {return new ChiseledLacquerLogBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).randomTicks());});
 public static final RegistryObject<Block> RawUrushiLayer = BLOCKS.register("raw_urushi_layer", () -> {return new RawUrushiLayerBlock(AbstractBlock.Properties.of(Material.PLANT, MaterialColor.WOOD).sound(SoundType.SLIME_BLOCK).harvestLevel(0).strength(0.1F, 1.0F).noOcclusion().noCollission());});
 public static final RegistryObject<Block> RedUrushiPlanks = BLOCKS.register("red_urushi_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
 public static final RegistryObject<Block> RedUrushiSlab = BLOCKS.register("red_urushi_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
 public static final RegistryObject<Block> RedUrushiStairs = BLOCKS.register("red_urushi_stairs", () -> {return new StairsBlock(((Block)RedUrushiPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> RedUrushiFence = BLOCKS.register("red_urushi_fence", () -> {return new FenceBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
 public static final RegistryObject<Block> RedUrushiFenceGate = BLOCKS.register("red_urushi_fence_gate", () -> {return new FenceGateBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
 public static final RegistryObject<Block> RedUrushiDoor = BLOCKS.register("red_urushi_door", () -> {return new DoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion());});
 public static final RegistryObject<Block> RedUrushiTrapdoor = BLOCKS.register("red_urushi_trapdoor", () -> {return new TrapDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion().isValidSpawn(BlocksRegister::never));});
 public static final RegistryObject<Block> RedUrushiPressurePlate = BLOCKS.register("red_urushi_pressure_plate", () -> {return new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
 public static final RegistryObject<Block> RedUrushiButton = BLOCKS.register("red_urushi_button", () -> {return new WoodButtonBlock(AbstractBlock.Properties.of(Material.DECORATION, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
 public static final RegistryObject<Block> SmoothRedUrushiPlanks = BLOCKS.register("smooth_red_urushi_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> SmoothRedUrushiSlab = BLOCKS.register("smooth_red_urushi_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
 public static final RegistryObject<Block> SmoothRedUrushiStairs = BLOCKS.register("smooth_red_urushi_stairs", () -> {return new StairsBlock(((Block)SmoothRedUrushiPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> RedUrushiParapet = BLOCKS.register("red_urushi_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
 public static final RegistryObject<Block> BlackUrushiPlanks = BLOCKS.register("black_urushi_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
 public static final RegistryObject<Block> BlackUrushiSlab = BLOCKS.register("black_urushi_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
 public static final RegistryObject<Block> BlackUrushiStairs = BLOCKS.register("black_urushi_stairs", () -> {return new StairsBlock(((Block)BlackUrushiPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> BlackUrushiFence = BLOCKS.register("black_urushi_fence", () -> {return new FenceBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
 public static final RegistryObject<Block> BlackUrushiFenceGate = BLOCKS.register("black_urushi_fence_gate", () -> {return new FenceGateBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F));});
 public static final RegistryObject<Block> BlackUrushiDoor = BLOCKS.register("black_urushi_door", () -> {return new DoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion());});
 public static final RegistryObject<Block> BlackUrushiTrapdoor = BLOCKS.register("black_urushi_trapdoor", () -> {return new TrapDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(2.0F, 3.0F).noOcclusion().isValidSpawn(BlocksRegister::never));});
 public static final RegistryObject<Block> BlackUrushiPressurePlate = BLOCKS.register("black_urushi_pressure_plate", () -> {return new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
 public static final RegistryObject<Block> BlackUrushiButton = BLOCKS.register("black_urushi_button", () -> {return new WoodButtonBlock(AbstractBlock.Properties.of(Material.DECORATION, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.5F, 3.0F).noCollission());});
 public static final RegistryObject<Block> SmoothBlackUrushiPlanks = BLOCKS.register("smooth_black_urushi_planks", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> SmoothBlackUrushiSlab = BLOCKS.register("smooth_black_urushi_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).dynamicShape());});
 public static final RegistryObject<Block> SmoothBlackUrushiStairs = BLOCKS.register("smooth_black_urushi_stairs", () -> {return new StairsBlock(((Block)SmoothBlackUrushiPlanks.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F));});
 public static final RegistryObject<Block> BlackUrushiParapet = BLOCKS.register("black_urushi_parapet", () -> {return new ParapetBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(2.0F, 3.0F));});
 public static final RegistryObject<Block> DoubledWoodenCabinetry = BLOCKS.register("doubled_wooden_cabinetry", () -> {return new DoubledWoodenCabinetryBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion());});
 public static final RegistryObject<Block> WoodenCabinetry = BLOCKS.register("wooden_cabinetry", () -> {return new WoodenCabinetryBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> WoodenCabinetrySlab = BLOCKS.register("wooden_cabinetry_slab", () -> {return new WoodenCabinetrySlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
 public static final RegistryObject<Block> DoubledRedUrushiWoodenCabinetry = BLOCKS.register("doubled_red_urushi_wooden_cabinetry", () -> {return new DoubledWoodenCabinetryBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion());});
 public static final RegistryObject<Block> RedUrushiWoodenCabinetry = BLOCKS.register("red_urushi_wooden_cabinetry", () -> {return new WoodenCabinetryBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion());});
 public static final RegistryObject<Block> RedUrushiWoodenCabinetrySlab = BLOCKS.register("red_urushi_wooden_cabinetry_slab", () -> {return new WoodenCabinetrySlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
    public static final RegistryObject<Block> FoxHopper = BLOCKS.register("fox_hopper", () -> {return new FoxHopperBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> dirt_furnace= BLOCKS.register("dirt_furnace", () -> {return new DirtFurnaceBlock(AbstractBlock.Properties.of(Material.DIRT, MaterialColor.DIRT).harvestTool(ToolType.SHOVEL).sound(SoundType.GRAVEL).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
    public static final RegistryObject<Block> rice_cauldron= BLOCKS.register("rice_cauldron", () -> {return new RiceCauldronBlock(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
    public static final RegistryObject<Block> OilExtractor = BLOCKS.register("oil_extractor", () -> {return new OilExtractorBlock(AbstractBlock.Properties.of(Material.WOOD).sound(SoundType.WOOD).harvestLevel(0).strength(1F, 3.0F));});
    public static final RegistryObject<Block> Fryer = BLOCKS.register("fryer", () -> {return new FryerBlock(AbstractBlock.Properties.of(Material.METAL).sound(SoundType.METAL).harvestLevel(0).requiresCorrectToolForDrops().strength(1F, 10.0F).noOcclusion().dynamicShape().isViewBlocking(BlocksRegister::never));});
    public static final RegistryObject<Block> Kitsunebi = BLOCKS.register("kitsunebi", () -> {return new KitsunebiBlock(AbstractBlock.Properties.of(Material.STONE).sound(SoundType.BAMBOO).instabreak().noCollission().noOcclusion().lightLevel((p_235470_0_) -> {return 15;}));});
    public static final RegistryObject<Block> Andon = BLOCKS.register("andon", () -> {return new AndonBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).sound(SoundType.WOOD).harvestLevel(0).strength(0.3F, 3.0F).noOcclusion().lightLevel((p_235470_0_) -> {return 15;}));});
    public static final RegistryObject<Block> AriakeAndon = BLOCKS.register("ariake_andon", () -> {return new AriakeAndonBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).sound(SoundType.WOOD).harvestLevel(0).strength(0.3F, 3.0F).noOcclusion().lightLevel((p_235470_0_) -> {return 13;}));});
    public static final RegistryObject<Block> kasuga_lantern= BLOCKS.register("kasuga_lantern", () -> {return new KasugaLanternBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).sound(SoundType.WOOD).harvestLevel(0).strength(0.3F, 3.0F).noOcclusion().lightLevel((p_235470_0_) -> {return 15;}));});
    public static final RegistryObject<Block> IronGiboshi = BLOCKS.register("iron_giboshi", () -> {return new GiboshiBlock(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).requiresCorrectToolForDrops().strength(0.5F, 30.0F).noOcclusion());});
    public static final RegistryObject<Block> GoldenGiboshi = BLOCKS.register("gold_giboshi", () -> {return new GiboshiBlock(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).requiresCorrectToolForDrops().strength(0.5F, 30.0F).noOcclusion());});
    public static final RegistryObject<Block> BlankFusuma = BLOCKS.register("blank_fusuma", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SNOW).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> BlueSeigaihaFusuma = BLOCKS.register("blue_seigaiha_fusuma", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SNOW).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> BlueSayagataFusuma = BLOCKS.register("blue_sayagata_fusuma", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SNOW).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
 public static final RegistryObject<Block> BlankAntiqueFusuma = BLOCKS.register("blank_antique_fusuma", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SNOW).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
 public static final RegistryObject<Block> SlidingGlassDoor = BLOCKS.register("sliding_glass_door", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.GLASS).sound(SoundType.GLASS).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> OakShojiPane = BLOCKS.register("oak_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> SpruceShojiPane = BLOCKS.register("spruce_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.PODZOL).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> BirchShojiPane = BLOCKS.register("birch_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> JungleShojiPane = BLOCKS.register("jungle_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.DIRT).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> AcaciaShojiPane = BLOCKS.register("acacia_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> DarkOakShojiPane = BLOCKS.register("dark_oak_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> JapaneseApricotShojiPane = BLOCKS.register("japanese_apricot_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> SakuraShojiPane = BLOCKS.register("sakura_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> CypressShojiPane = BLOCKS.register("cypress_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> RedUrushiShojiPane = BLOCKS.register("red_urushi_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> BlackUrushiShojiPane = BLOCKS.register("black_urushi_shoji_pane", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> OakShoji = BLOCKS.register("oak_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> SpruceShoji = BLOCKS.register("spruce_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.PODZOL).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> BirchShoji = BLOCKS.register("birch_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> JungleShoji = BLOCKS.register("jungle_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.DIRT).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> AcaciaShoji = BLOCKS.register("acacia_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> DarkOakShoji = BLOCKS.register("dark_oak_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> JapaneseApricotShoji = BLOCKS.register("japanese_apricot_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> SakuraShoji = BLOCKS.register("sakura_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> CypressShoji = BLOCKS.register("cypress_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> RedUrushiShoji = BLOCKS.register("red_urushi_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> BlackUrushiShoji = BLOCKS.register("black_urushi_shoji", () -> {return new SlideDoorBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).sound(SoundType.WOOD).strength(0.2F, 3.0F).noOcclusion());});
    public static final RegistryObject<Block> DeepBlueNoren = BLOCKS.register("deep_blue_noren", () -> {return new NorenBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_BLUE).sound(SoundType.WOOD).harvestLevel(0).strength(0.2F, 1F).noCollission());});
    public static final RegistryObject<Block> RedNoren = BLOCKS.register("red_noren", () -> {return new NorenBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).sound(SoundType.WOOD).harvestLevel(0).strength(0.2F, 1F).noCollission());});
    public static final RegistryObject<Block> CyanNoren = BLOCKS.register("cyan_noren", () -> {return new NorenBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_CYAN).sound(SoundType.WOOD).harvestLevel(0).strength(0.2F, 1F).noCollission());});
    public static final RegistryObject<Block> MagentaNoren = BLOCKS.register("magenta_noren", () -> {return new NorenBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_MAGENTA).sound(SoundType.WOOD).harvestLevel(0).strength(0.2F, 1F).noCollission());});
    public static final RegistryObject<Block> MenOnsenNoren = BLOCKS.register("men_onsen_noren", () -> {return new WideNorenBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_BLUE).sound(SoundType.WOOD).harvestLevel(0).strength(0.2F, 1F).noCollission());});
    public static final RegistryObject<Block> WomenOnsenNoren = BLOCKS.register("women_onsen_noren", () -> {return new WideNorenBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).sound(SoundType.WOOD).harvestLevel(0).strength(0.2F, 1F).noCollission());});
    public static final RegistryObject<Block> SushiNoren = BLOCKS.register("sushi_noren", () -> {return new WideNorenBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_BLUE).sound(SoundType.WOOD).harvestLevel(0).strength(0.2F, 1F).noCollission());});
    public static final RegistryObject<Block> kakejiku_14 = BLOCKS.register("kakejiku_14", () -> {return new KakejikuBlock(null,AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_13 = BLOCKS.register("kakejiku_13", () -> {return new KakejikuBlock(kakejiku_14.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_12 = BLOCKS.register("kakejiku_12", () -> {return new KakejikuBlock(kakejiku_13.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_11 = BLOCKS.register("kakejiku_11", () -> {return new KakejikuBlock(kakejiku_12.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_10 = BLOCKS.register("kakejiku_10", () -> {return new KakejikuBlock(kakejiku_11.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_9 = BLOCKS.register("kakejiku_9", () -> {return new KakejikuBlock(kakejiku_10.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_8 = BLOCKS.register("kakejiku_8", () -> {return new KakejikuBlock(kakejiku_9.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_7 = BLOCKS.register("kakejiku_7", () -> {return new KakejikuBlock(kakejiku_8.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_6 = BLOCKS.register("kakejiku_6", () -> {return new KakejikuBlock(kakejiku_7.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_5 = BLOCKS.register("kakejiku_5", () -> {return new KakejikuBlock(kakejiku_6.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_4 = BLOCKS.register("kakejiku_4", () -> {return new KakejikuBlock(kakejiku_5.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_3 = BLOCKS.register("kakejiku_3", () -> {return new KakejikuBlock(kakejiku_4.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_2 = BLOCKS.register("kakejiku_2", () -> {return new KakejikuBlock(kakejiku_3.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> kakejiku_1 = BLOCKS.register("kakejiku_1", () -> {return new KakejikuBlock(kakejiku_2.get(),AbstractBlock.Properties.of(Material.WOOD, MaterialColor.TERRACOTTA_GREEN).sound(SoundType.WOOD).harvestLevel(0).instabreak().noCollission());});
    public static final RegistryObject<Block> white_futon = BLOCKS.register("white_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> orange_futon = BLOCKS.register("orange_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> magenta_futon = BLOCKS.register("magenta_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> light_blue_futon = BLOCKS.register("light_blue_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> yellow_futon = BLOCKS.register("yellow_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> lime_futon = BLOCKS.register("lime_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> pink_futon = BLOCKS.register("pink_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> gray_futon = BLOCKS.register("gray_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> light_gray_futon = BLOCKS.register("light_gray_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> cyan_futon = BLOCKS.register("cyan_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> purple_futon = BLOCKS.register("purple_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> blue_futon = BLOCKS.register("blue_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> brown_futon = BLOCKS.register("brown_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> green_futon = BLOCKS.register("green_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> red_futon = BLOCKS.register("red_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> black_futon = BLOCKS.register("black_futon", () -> {return new FutonBlock(DyeColor.WHITE,AbstractBlock.Properties.of(Material.WOOL, MaterialColor.WOOL).sound(SoundType.WOOL).harvestLevel(0).strength(0.3F,10F));});
    public static final RegistryObject<Block> CopperOre = BLOCKS.register("copper_ore", () -> {return new OreBlock(AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).sound(SoundType.STONE).harvestLevel(0).requiresCorrectToolForDrops().strength(1.5F, 10.0F));});
    public static final RegistryObject<Block> JapaneseTimberBamboo = BLOCKS.register("japanese_timber_bamboo", () -> {return new JapaneseTimberBambooBlock(AbstractBlock.Properties.of(Material.PLANT, MaterialColor.GRASS).sound(SoundType.BAMBOO).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion().randomTicks());});
    public static final RegistryObject<Block> BambooBlock = BLOCKS.register("bamboo_block", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.BAMBOO).harvestLevel(0).strength(0.5F, 10.0F));});
    public static final RegistryObject<Block> BambooSlab = BLOCKS.register("bamboo_slab", () -> {return new SlabBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.BAMBOO).harvestLevel(0).strength(0.5F, 10.0F).dynamicShape());});
    public static final RegistryObject<Block> BambooStairs = BLOCKS.register("bamboo_stairs", () -> {return new StairsBlock(((Block)BambooBlock.get()).defaultBlockState(), AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.BAMBOO).harvestLevel(0).strength(0.5F, 10.0F));});

    public static final RegistryObject<Block> BambooWall = BLOCKS.register("bamboo_wall", () -> {return new PaneBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).sound(SoundType.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(0.5F, 10.0F).noOcclusion());});
    public static final RegistryObject<Block> BambooCharcoalBlock = BLOCKS.register("bamboo_charcoal_block", () -> {return new Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.BAMBOO).harvestLevel(0).strength(0.5F, 10.0F));});
    public static final RegistryObject<Block> Tawara = BLOCKS.register("tawara", () -> {return new HorizonalRotateBlock(AbstractBlock.Properties.of(Material.PLANT, MaterialColor.DIRT).sound(SoundType.GRASS).strength(0.3F, 1.0F));});
    public static final RegistryObject<Block> PaddyField = BLOCKS.register("paddy_field", () -> {return new FarmlandBlock(AbstractBlock.Properties.of(Material.DIRT, MaterialColor.DIRT).randomTicks().strength(0.6F).sound(SoundType.GRAVEL).isViewBlocking(BlocksRegister::always).isSuffocating(BlocksRegister::always));});
    public static final RegistryObject<Block> RiceCrop = BLOCKS.register("rice_crop", () -> {return new RiceCropBlock(AbstractBlock.Properties.of(Material.PLANT, MaterialColor.GRASS).noCollission().randomTicks().instabreak().sound(SoundType.CROP));});
    public static final RegistryObject<Block> AzukiCrop = BLOCKS.register("azuki_crop", () -> {return new AzukiCropBlock(AbstractBlock.Properties.of(Material.PLANT, MaterialColor.GRASS).noCollission().randomTicks().instabreak().sound(SoundType.CROP));});
    public static final RegistryObject<Block> SoyCrop = BLOCKS.register("soy_crop", () -> {return new SoyCropBlock(AbstractBlock.Properties.of(Material.PLANT, MaterialColor.GRASS).noCollission().randomTicks().instabreak().sound(SoundType.CROP));});
    public static final RegistryObject<Block> dough = BLOCKS.register("dough", () -> {return new DoughBlock(AbstractBlock.Properties.of(Material.CLAY, MaterialColor.WOOL).sound(SoundType.WOOD).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> udon = BLOCKS.register("udon", () -> {return new UdonBlock(AbstractBlock.Properties.of(Material.CLAY, MaterialColor.WOOL).sound(SoundType.WOOD).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> salt_and_sand = BLOCKS.register("salt_and_sand", () -> {return new SaltAndSandBlock(AbstractBlock.Properties.of(Material.SAND, MaterialColor.SAND).harvestTool(ToolType.SHOVEL).sound(SoundType.SAND).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> Ironsand = BLOCKS.register("ironsand_ore", () -> {return new FallingBlock(AbstractBlock.Properties.of(Material.SAND, MaterialColor.SAND).harvestTool(ToolType.SHOVEL).sound(SoundType.SAND).harvestLevel(0).strength(1.0F, 10.0F));});
    public static final RegistryObject<Block> NormalIronIngot9 = BLOCKS.register("normal_iron_ingot_9", () -> {return new IronIngotBlock(null,AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).requiresCorrectToolForDrops().strength(0.2F, 10.0F));});
    public static final RegistryObject<Block> NormalIronIngot8 = BLOCKS.register("normal_iron_ingot_8", () -> {return new IronIngotBlock(NormalIronIngot9.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> NormalIronIngot7 = BLOCKS.register("normal_iron_ingot_7", () -> {return new IronIngotBlock(NormalIronIngot8.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> NormalIronIngot6 = BLOCKS.register("normal_iron_ingot_6", () -> {return new IronIngotBlock(NormalIronIngot7.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> NormalIronIngot5 = BLOCKS.register("normal_iron_ingot_5", () -> {return new IronIngotBlock(NormalIronIngot6.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> NormalIronIngot4 = BLOCKS.register("normal_iron_ingot_4", () -> {return new IronIngotBlock(NormalIronIngot5.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> NormalIronIngot3 = BLOCKS.register("normal_iron_ingot_3", () -> {return new IronIngotBlock(NormalIronIngot4.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> NormalIronIngot2 = BLOCKS.register("normal_iron_ingot_2", () -> {return new IronIngotBlock(NormalIronIngot3.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> NormalIronIngot1 = BLOCKS.register("normal_iron_ingot_1", () -> {return new IronIngotBlock(NormalIronIngot2.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> NormalIronIngot0 = BLOCKS.register("normal_iron_ingot_0", () -> {return new IronIngotBlock(NormalIronIngot1.get(),AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).sound(SoundType.METAL).harvestLevel(0).instabreak());});
    public static final RegistryObject<Block> rice_hokora= BLOCKS.register("rice_hokora", () -> {return new RIceHokoraBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
    public static final RegistryObject<Block> reiryoku_tank_tier1= BLOCKS.register("reiryoku_tank", () -> {return new ReiryokuTankTier1Block(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOL).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion().dynamicShape().noCollission());});
    public static final RegistryObject<Block> reiryoku_pipe= BLOCKS.register("reiryoku_pipe", () -> {return new ReiryokuPipeBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
    public static final RegistryObject<Block> reiryoku_altar= BLOCKS.register("reiryoku_altar", () -> {return new ReiryokuAltarBlock(AbstractBlock.Properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).sound(SoundType.WOOD).harvestLevel(0).strength(1.0F, 10.0F).noOcclusion().dynamicShape());});
    public BlocksRegister() {
    }

    public static void register(IEventBus eventBus) {
        BLOCKS.register(eventBus);
    }

    private static Boolean never(BlockState p_235427_0_, IBlockReader p_235427_1_, BlockPos p_235427_2_, EntityType<?> p_235427_3_) {
        return (boolean)false;
    }
    private static boolean always(BlockState p_235426_0_, IBlockReader p_235426_1_, BlockPos p_235426_2_) {
        return true;
    }
    private static boolean never(BlockState p_235436_0_, IBlockReader p_235436_1_, BlockPos p_235436_2_) {
        return false;
    }

}
